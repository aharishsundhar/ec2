# This is a basic workflow to help you get started with Actions

name: Nissan Dev auto

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  ec2login:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Execute SSH commmands on remote server
        uses: JimCronqvist/action-ssh@master
        with:
          hosts: 'ubuntu@ec2-34-197-46-177.compute-1.amazonaws.com'
          privateKey: ${{ secrets.PRIVATE_KEY }}
          command: |
#            cd nissanautoDP_harish
            cd nissan_autodeploy
#            echo "pulling nissan-repostory"
#            git init
#            git pull git@github.com:dan-castillo/nissan-demo.git 
#            git checkout feature/nissan_autodeploy

            echo "To check all images and container remove"
            cd devops/local/docker-compose
            docker-compose -p new2-nissan down --rmi all
            docker rm -f quoteomaticui-nissan acousticmanager-nissan cdnmanager-nissan
            docker rmi newquoteui-nissan acousticmanager-nissan cdnmanager-nissan

#            echo "completely remove and running container"
#            cd ../../../ && cd application/client/desktop/quoteomatictest
#            docker build -t newquoteui-nissan .
#            docker run --name quoteomaticui-nissan --restart=unless-stopped -d -p 5098:5000 -v applicationnew-nsnew:/app newquoteui-nissan
#            cd ../../../../ && cd application/services/custom_services/wcmx-acoustic
#            docker build -t acousticmanager-nissan .
#            docker run --name acousticmanager-nissan --restart=unless-stopped -d -p 3025:3015 -v applicationnew-nsnew:/code --env-file=../../.env acousticmanager-nissan
#            cd .. && cd cdn-manager
#            docker build -t cdnmanager-nissan .
#            docker run --name cdnmanager-nissan --restart=unless-stopped -d -p 3111:3111 -v applicationnew-nsnew:/code --env-file=../../.env --link acousticmanager-nissan cdnmanager-nissan
  #           cd ../../../ && cd devops/local/docker-compose
  #           docker-compose -p new2-nissan up -d
  #           docker cp ../docker/mongo.js mongo-nissan:/data/db/
  #           docker exec -ti mongo-nissan mongo -u admin -p 'password' --authenticationDatabase 'admin' quoteomatictest /data/db/mongo.js
  # Upload_S3:

  #   runs-on: ubuntu-latest
  #   needs: ec2login
  #   steps:
      
  #     - name: Execute SSH commmands on remote server
  #       uses: JimCronqvist/action-ssh@master
  #       with:
  #         hosts: 'ubuntu@ec2-34-197-46-177.compute-1.amazonaws.com'
  #         privateKey: ${{ secrets.PRIVATE_KEY }}
  #         command: |
  #           echo "s3 bucket to upload file"
  #           cd distharish_harish
  #           bash distnissan.sh

      








             

            
            
        
            
            
            
            
            
            



